#!/usr/bin/env bash

VERSION='1.0.0'

: ${COVERAGE_REPORT_TXT:="./tests/README"}
: ${COVERAGE_REPORT_MD:="./tests/README.md"}

# Document available command line options. This function
# simply outputs script's SYNOPSIS to the user terminal.
__help() {
cat << EOS
Usage:
    $(basename ${0}) [options]

    THIS SCRIPT SHOULD BE INVOKED VIA `npm test`

    Test built extension to ensure that it's compatibility with Safari.

        Options                 All options are optional and
        -------                 can be supplied in any order.

        -l --log=<path>         Redirect all output to a file
        -q --quiet              Suppress output of the script
        -? --help               Display this help message
        --version               Script and BASH version info

    <> - required parameters    [] - optional parameters
EOS
}

# This function is executed after processing all supplied
# options but before looking at the script's arguments.
__init() {
    INITIAL_WORKING_DIR="$pwd"
    cd $(dirname ${0})/..
}

# This function is called when the script receives an EXIT pseudo-signal. It
# simulates a common destructor behaviour inside BASH scripts. It allows this
# script to release and clean up resources upon termination.
__exit() {
    rm -f ${COVERAGE_REPORT_TXT}
    cd ${INITIAL_WORKING_DIR}
}

# Insure the presence of OPTARG in the current scope. If OPTARG is missing then
# display help message via __help and exit with an error code.
require_OPTARG() {
    if [[ -z ${OPTARG} ]]; then
        echo "${0}: option requires an argument -- ${OPTKEY}" >&2
        __help
        exit 11
    fi
}

# By default BASH does not provide support for long options. However, we can
# trick it into doing so by defining '-:' as part of the optspec.
while getopts "l:q?-:" OPTKEY; do

    if [[ "${OPTKEY}" = '-' ]]; then
        OPTKEY=`echo ${OPTARG} | sed -e 's/=.*//'`
        OPTARG=`echo ${OPTARG} | sed -e "s/^${OPTKEY}=\{0,1\}//"`
    fi

    case ${OPTKEY} in
        'l'|'log')
            require_OPTARG
            mkdir -p $(dirname ${OPTARG})
            exec > ${OPTARG} 2>&1
            ;;
        'q'|'quiet')
            exec > /dev/null
            ;;
        'version')
            echo "Shell script $0 version ${VERSION}"
            echo `bash --version | head -n 1`
            exit
            ;;
        '?'|'help')
            __help
            exit
            ;;
        *)
            if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                echo "${0}: illegal option -- ${OPTKEY}" >&2
                __help
                exit 10
            fi
            ;;
    esac
done

# Clear all options and reset the command line argument count
shift $(( OPTIND -1 ))

# Check for an option-terminator string
if [[ "${1}" == "--" ]]; then
    shift
fi

# Initialise script destructor
trap __exit EXIT
__init

# Process all supplied arguments
if [[ -n ${@} ]]; then
  echo "${0}: illegal argument -- ${@}" >&2
  __help
  exit 30
fi

# Exit immediately if any of the following command exits with a non-zero status
set -e

plutil -lint ./JSONav.safariextension/Info.plist \
    ./JSONav.safariextension/Settings.plist \
    ./docs/Update.plist
echo
./node_modules/karma/bin/karma start ./tests/karma.conf.js

echo -e "# Tests Coverage\n\`\`\`" > ${COVERAGE_REPORT_MD}
cat -v tests/README | sed -E 's/\^\[\[[0-9;]+m//g;' >> ${COVERAGE_REPORT_MD}
echo "\`\`\`" >> ${COVERAGE_REPORT_MD}
