#!/usr/bin/env bash

VERSION='1.0.0'

: ${CMD_PLIST_BUDDY:="/usr/libexec/PlistBuddy"}
: ${JSONAV_INFO_PLIST:="./JSONav.safariextension/Info.plist"}
: ${JSONAV_SETTINGS_PLIST:="./JSONav.safariextension/Settings.plist"}
: ${JSONAV_UPDATE_PLIST:="./docs/Update.plist"}

# Document available command line options. This function
# simply outputs script's SYNOPSIS to the user terminal.
__help() {
cat << EOS
Usage:
    $(basename ${0}) [options] <release-version>

    THIS SCRIPT SHOULD BE INVOKED VIA "npm install"

    Reconfigure extensions settings based on the values supplied in
    package.json and available highlight.js styles.

        Options                 All options are optional and
        -------                 can be supplied in any order.

        -l --log=<path>         Redirect all output to a file
        -q --quiet              Suppress output of the script
        -? --help               Display this help message
        --version               Script and BASH version info

        Arguments               All agruments are optionals and
        ---------               can be supplied in any order.

        highlight.js            Build highlight.js

    <> - required parameters    [] - optional parameters
EOS
}

# This function is executed after processing all supplied
# options but before looking at the script's arguments.
__init() {
    INITIAL_WORKING_DIR="$pwd"
    cd $(dirname ${0})/..
}

# This function is called when the script receives an EXIT pseudo-signal. It
# simulates a common destructor behaviour inside BASH scripts. It allows this
# script to release and clean up resources upon termination.
__exit() {
    cd ${INITIAL_WORKING_DIR}
}

# Insure the presence of OPTARG in the current scope. If OPTARG is missing then
# display help message via __help and exit with an error code.
require_OPTARG() {
    if [[ -z ${OPTARG} ]]; then
        echo "${0}: option requires an argument -- ${OPTKEY}" >&2
        __help
        exit 11
    fi
}

# Copy a given property from one plist to another.
set_update_property() {
    local source_file=${1}
    local source_prop=${2}
    local target_prop=${3:-${source_prop}}

    local value="$(${CMD_PLIST_BUDDY} -c "Print ${source_prop}" ${source_file})"
    ${CMD_PLIST_BUDDY} -c "Set :Extension\ Updates:0:${target_prop} ${value}" ${JSONAV_UPDATE_PLIST}
}

# By default BASH does not provide support for long options. However, we can
# trick it into doing so by defining '-:' as part of the optspec.
while getopts "l:q?-:" OPTKEY; do

    if [[ "${OPTKEY}" = '-' ]]; then
        OPTKEY=`echo ${OPTARG} | sed -e 's/=.*//'`
        OPTARG=`echo ${OPTARG} | sed -e "s/^${OPTKEY}=\{0,1\}//"`
    fi

    case ${OPTKEY} in
        'l'|'log')
            require_OPTARG
            mkdir -p $(dirname ${OPTARG})
            exec > ${OPTARG} 2>&1
            ;;
        'q'|'quiet')
            exec > /dev/null
            ;;
        'version')
            echo "Shell script $0 version ${VERSION}"
            echo `bash --version | head -n 1`
            exit
            ;;
        '?'|'help')
            __help
            exit
            ;;
        *)
            if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                echo "${0}: illegal option -- ${OPTKEY}" >&2
                __help
                exit 10
            fi
            ;;
    esac
done

# Clear all options and reset the command line argument count
shift $(( OPTIND -1 ))

# Check for an option-terminator string
if [[ "${1}" == "--" ]]; then
    shift
fi

# Initialise script destructor
trap __exit EXIT
__init

# Process all supplied arguments
if [[ -n ${@} ]]; then
  echo "${0}: illegal argument -- ${@}" >&2
  __help
  exit 30
fi

# Exit immediately if any of the following command exits with a non-zero status
set -e
echo -e "\n** Updating plist settings **\n"

echo "- adding colour schemes"
${CMD_PLIST_BUDDY} -c "Delete :1:Titles" ${JSONAV_SETTINGS_PLIST}
${CMD_PLIST_BUDDY} -c "Add    :1:Titles array" ${JSONAV_SETTINGS_PLIST}

${CMD_PLIST_BUDDY} -c "Delete :1:Values" ${JSONAV_SETTINGS_PLIST}
${CMD_PLIST_BUDDY} -c "Add    :1:Values array" ${JSONAV_SETTINGS_PLIST}

for value in $(find ./JSONav.safariextension/vendor/highlight.js/styles -name *.css -exec basename {} ".css" \; | sort ); do
    title=$(echo $value | tr "_-." " " | awk '{for (i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
    ${CMD_PLIST_BUDDY} -c "Add :1:Titles: string '${title}'" ${JSONAV_SETTINGS_PLIST}
    ${CMD_PLIST_BUDDY} -c "Add :1:Values: string '${value}'" ${JSONAV_SETTINGS_PLIST}
done

echo "- setting version numbers"
RELEASE_VERSION=$(node -pe "require('./package.json').version")
${CMD_PLIST_BUDDY} -c "Set :CFBundleShortVersionString ${RELEASE_VERSION}" ${JSONAV_INFO_PLIST}
${CMD_PLIST_BUDDY} -c "Set :CFBundleVersion ${RELEASE_VERSION}" ${JSONAV_INFO_PLIST}

echo "- setting update manifest"
set_update_property ${JSONAV_INFO_PLIST} CFBundleIdentifier
set_update_property ${JSONAV_INFO_PLIST} DeveloperIdentifier "Developer\ Identifier"
set_update_property ${JSONAV_INFO_PLIST} CFBundleVersion
set_update_property ${JSONAV_INFO_PLIST} CFBundleShortVersionString
echo
