#!/usr/bin/env bash

VERSION='1.0.0'

# Document available command line options. This function
# simply outputs script's SYNOPSIS to the user terminal.
__help() {
cat << EOS
Usage:
    $(basename ${0}) [options] [arguments]

    THIS SCRIPT SHOULD BE INVOKED VIA `npm run build`

    Install vendor packages into the extension directory after
    they have been build.

        Options                 All options are optional and
        -------                 can be supplied in any order.

        -l --log=<path>         Redirect all output to a file
        -q --quiet              Suppress output of the script
        -? --help               Display this help message
        --version               Script and BASH version info

        Arguments               All agruments are optionals and
        ---------               can be supplied in any order.

        highlight.js            Install highlight.js
        linkifyjs               Install linkifyjs

    <> - required parameters    [] - optional parameters
EOS
}

# This function is executed after processing all supplied
# options but before looking at the script's arguments.
__init() {
    INITIAL_WORKING_DIR="$pwd"
    cd $(dirname ${0})/..
}

# This function is called when the script receives an EXIT pseudo-signal. It
# simulates a common destructor behaviour inside BASH scripts. It allows this
# script to release and clean up resources upon termination.
__exit() {
    cd ${INITIAL_WORKING_DIR}
}

# Insure the presence of OPTARG in the current scope. If OPTARG is missing then
# display help message via __help and exit with an error code.
require_OPTARG() {
    if [[ -z ${OPTARG} ]]; then
        echo "${0}: option requires an argument -- ${OPTKEY}" >&2
        __help
        exit 11
    fi
}

# By default BASH does not provide support for long options. However, we can
# trick it into doing so by defining '-:' as part of the optspec.
while getopts "l:q?-:" OPTKEY; do

    if [[ "${OPTKEY}" = '-' ]]; then
        OPTKEY=`echo ${OPTARG} | sed -e 's/=.*//'`
        OPTARG=`echo ${OPTARG} | sed -e "s/^${OPTKEY}=\{0,1\}//"`
    fi

    case ${OPTKEY} in
        'l'|'log')
            require_OPTARG
            mkdir -p $(dirname ${OPTARG})
            exec > ${OPTARG} 2>&1
            ;;
        'q'|'quiet')
            exec > /dev/null
            ;;
        'version')
            echo "Shell script $0 version ${VERSION}"
            echo `bash --version | head -n 1`
            exit
            ;;
        '?'|'help')
            __help
            exit
            ;;
        *)
            if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                echo "${0}: illegal option -- ${OPTKEY}" >&2
                __help
                exit 10
            fi
            ;;
    esac
done

# Clear all options and reset the command line argument count
shift $(( OPTIND -1 ))

# Check for an option-terminator string
if [[ "${1}" == "--" ]]; then
    shift
fi

# Initialise script destructor
trap __exit EXIT
__init

# Process all supplied arguments
for ARG in ${@:-highlight.js linkifyjs}; do
    echo -e "\n** Installing ${ARG} **\n"
    case ${ARG} in
        'highlight.js')
            (
                mkdir -p ./JSONav.safariextension/vendor/highlight.js
                cp -f ./vendor/highlight.js/build/highlight.pack.js ./JSONav.safariextension/vendor/highlight.js/
                cp -Rf ./vendor/highlight.js/build/demo/styles ./JSONav.safariextension/vendor/highlight.js/
            )
            ;;
        'linkifyjs')
            (
                mkdir -p ./JSONav.safariextension/vendor/linkifyjs
                cp -f ./vendor/linkifyjs/dist/{linkify.min.js,linkify-element.min.js} ./JSONav.safariextension/vendor/linkifyjs/
            )
            ;;
        *)
            # Fail if invalid argument is given
            echo "${0}: illegal argument -- ${ARG}" >&2
            __help
            exit 30
            ;;
    esac
done
